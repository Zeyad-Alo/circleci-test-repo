# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  print-pipeline-id:
    description: "A command that prints the pipeline's id"
    parameters:
      id:
        type: string
    steps:
      - run: echo << parameters.id >>

jobs:

  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1

  get_ips:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get ips
            command: |
              aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udacity" --output text >> inventory

  configure_infrastructure: 
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
                # You can get this ID in the section where you registered the SSH Key
                fingerprints: ["41:bf:b4:95:68:5f:e0:0a:c1:56:86:5f:30:15:8a:17"] 
        - run:
            name: Install Ansible
            command: |
              apk add --update ansible
        # - run:
        #     name: Get instance ip and set it in inventory
        #     command: |
        #       aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udacity" --output text >> inventory
        - run:
            name: Run Playbook and Configure server
            command: |
              ansible-playbook main.yml -i inventory

workflows:
  # Name the workflow "welcome"
  test-repo:
    # Run the welcome/run job in its own container
    jobs:
      - create_infrastructure
      - get_ips:
          requires:
          - create_infrastructure
      - configure_infrastructure:
          requires:
            - get_ips
